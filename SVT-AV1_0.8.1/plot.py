#!/usr/bin/env python3

import matplotlib.pyplot as plt
import statistics
data = [(0, 400, 82.43332, 1060.0), (0, 500, 86.07373, 1150.6), (0, 600, 88.74001, 1246.7), (0, 700, 90.40372, 1260.4), (0, 800, 91.77887, 1297.3), (0, 900, 92.99676, 1337.7), (0, 1000, 93.79699, 1454.3), (0, 1100, 94.67761, 1503.3), (0, 1200, 95.06198, 1470.2), (0, 1300, 95.36576, 1503.8), (0, 1400, 95.57969, 1539.5), (0, 1500, 95.57991, 1583.2), (0, 1600, 96.05603, 1631.3), (0, 1700, 96.31947, 1679.9), (0, 1800, 96.52645, 1762.5), (0, 1900, 96.67346, 1878.2), (0, 2000, 96.78677, 1954.2), (0, 2100, 96.88790, 1941.6), (0, 2200, 96.95803, 2384.0), (0, 2300, 97.01345, 2000.6), (0, 2400, 97.06831, 238.4), (0, 2500, 97.12317, 2232.8), (1, 400, 82.25655, 791.4), (1, 500, 85.96239, 790.6), (1, 600, 88.69302, 797.1), (1, 700, 90.44770, 815.9), (1, 800, 92.01648, 830.1), (1, 900, 92.95536, 882.3), (1, 1000, 93.93705, 965.1), (1, 1100, 94.59853, 1023.6), (1, 1200, 94.92589, 1020.5), (1, 1300, 95.41471, 992.0), (1, 1400, 95.68925, 1023.7), (1, 1500, 95.90436, 1051.7), (1, 1600, 96.03591, 1124.9), (1, 1700, 96.26503, 1165.0), (1, 1800, 96.49415, 1188.7), (1, 1900, 96.63617, 1226.5), (1, 2000, 96.78026, 1256.8), (1, 2100, 96.85905, 1250.1), (1, 2200, 96.93031, 1272.3), (1, 2300, 96.98490, 1352.4), (1, 2400, 97.02123, 1362.2), (1, 2500, 97.07907, 1344.4), (2, 400, 80.76270, 399.2), (2, 500, 84.68822, 385.7), (2, 600, 87.48205, 463.7), (2, 700, 89.53620, 501.7), (2, 800, 91.13809, 508.8), (2, 900, 92.26674, 471.7), (2, 1000, 93.22922, 524.3), (2, 1100, 93.89727, 569.4), (2, 1200, 94.51769, 554.5), (2, 1300, 95.02544, 590.0), (2, 1400, 95.30620, 558.3), (2, 1500, 95.54060, 570.2), (2, 1600, 95.85923, 652.3), (2, 1700, 96.15110, 670.1), (2, 1800, 96.39740, 623.6), (2, 1900, 95.97817, 722.0), (2, 2000, 96.68646, 730.8), (2, 2100, 96.80718, 721.1), (2, 2200, 96.91173, 749.2), (2, 2300, 96.95232, 728.6), (2, 2400, 97.017445, 748.8), (2, 2500, 97.08257, 802.0), (3, 400, 78.24464, 83.2), (3, 500, 82.32201, 85.7), (3, 600, 85.39511, 86.7), (3, 700, 87.79675, 95.2), (3, 800, 89.48650, 89.6), (3, 900, 90.78320, 92.5), (3, 1000, 91.90155, 93.7), (3, 1100, 92.82805, 96.5), (3, 1200, 93.45919, 95.6), (3, 1300, 94.06915, 98.3), (3, 1400, 94.68334, 100.3), (3, 1500, 94.90122, 99.6), (3, 1600, 95.26071, 101.8), (3, 1700, 95.67677, 104.0), (3, 1800, 95.84962, 105.2), (3, 1900, 96.07634, 106.3), (3, 2000, 96.27623, 106.0), (3, 2100, 96.43622, 108.2), (3, 2200, 96.59712, 108.1), (3, 2300, 96.64274, 108.9), (3, 2400, 96.74910, 110.5), (3, 2500, 96.73150, 109.4), (4, 400, 78.23284, 81.5), (4, 500, 82.52613, 83.5), (4, 600, 85.46454, 87.2), (4, 700, 87.75637, 86.6), (4, 800, 89.47670, 87.7), (4, 900, 90.62000, 93.1), (4, 1000, 91.90782, 88.8), (4, 1100, 92.80980, 92.8), (4, 1200, 93.44592, 88.4), (4, 1300, 94.11376, 91.5), (4, 1400, 94.64091, 92.1), (4, 1500, 94.99616, 92.3), (4, 1600, 95.46857, 91.2), (4, 1700, 95.64096, 92.8), (4, 1800, 95.85501, 101.4), (4, 1900, 96.07794, 101.9), (4, 2000, 96.29978, 107.7), (4, 2100, 96.42192, 108.3), (4, 2200, 96.55034, 110.1), (4, 2300, 96.60496, 108.7), (4, 2400, 96.71423, 114.8), (4, 2500, 96.70240, 136.3), (5, 400, 76.38762, 103.0), (5, 500, 80.86484, 75.5), (5, 600, 83.76671, 72.7), (5, 700, 86.36896, 77.5), (5, 800, 88.39992, 75.1), (5, 900, 89.68176, 78.4), (5, 1000, 90.74661, 82.8), (5, 1100, 91.64686, 77.6), (5, 1200, 92.55427, 80.3), (5, 1300, 93.28277, 82.7), (5, 1400, 93.87965, 84.0), (5, 1500, 94.40018, 93.9), (5, 1600, 94.84295, 82.7), (5, 1700, 95.21608, 93.2), (5, 1800, 95.47753, 134.8), (5, 1900, 95.74359, 99.4), (5, 2000, 95.96885, 99.1), (5, 2100, 96.12080, 102.9), (5, 2200, 96.38685, 91.8), (5, 2300, 96.43677, 82.0), (5, 2400, 96.54164, 83.5), (5, 2500, 96.61314, 85.2), (6, 400, 74.48227, 36.2), (6, 500, 79.38566, 38.2), (6, 600, 82.62093, 38.6), (6, 700, 85.19895, 39.0), (6, 800, 87.44207, 39.5), (6, 900, 88.97976, 39.7), (6, 1000, 90.13535, 39.5), (6, 1100, 91.09805, 39.6), (6, 1200, 92.00128, 42.1), (6, 1300, 92.93643, 42.4), (6, 1400, 93.65876, 42.0), (6, 1500, 94.08733, 44.5), (6, 1600, 94.52165, 45.0), (6, 1700, 94.94807, 43.8), (6, 1800, 95.26252, 44.6), (6, 1900, 95.60468, 45.7), (6, 2000, 95.78667, 46.2), (6, 2100, 95.99274, 46.5), (6, 2200, 96.26533, 48.0), (6, 2300, 96.45527, 48.9), (6, 2400, 96.47996, 47.4), (6, 2500, 96.60521, 47.6), (7, 400, 73.74035, 29.2), (7, 500, 78.87214, 29.6), (7, 600, 82.19322, 30.2), (7, 700, 84.89454, 31.6), (7, 800, 86.95920, 32.5), (7, 900, 88.61635, 33.2), (7, 1000, 89.99982, 34.6), (7, 1100, 90.92271, 34.0), (7, 1200, 91.87041, 35.3), (7, 1300, 92.97043, 35.1), (7, 1400, 93.45656, 35.8), (7, 1500, 93.958045, 24.1), (7, 1600, 94.45953, 35.6), (7, 1700, 94.90481, 36.9), (7, 1800, 95.17830, 36.7), (7, 1900, 95.49079, 37.4), (7, 2000, 95.69187, 38.1), (7, 2100, 95.97162, 38.4), (7, 2200, 96.20727, 39.5), (7, 2300, 96.40687, 40.4), (7, 2400, 96.45713, 40.0), (7, 2500, 96.52526, 40.2), (8, 400, 72.37180, 13.1), (8, 500, 77.51728, 13.7), (8, 600, 81.21893, 13.9), (8, 700, 84.05374, 14.0), (8, 800, 85.79868, 14.8), (8, 900, 87.28795, 14.8), (8, 1000, 88.74716, 15.0), (8, 1100, 89.91880, 14.8), (8, 1200, 90.89111, 15.1), (8, 1300, 91.83868, 16.0), (8, 1400, 92.47383, 15.8), (8, 1500, 93.10762, 16.2), (8, 1600, 93.63250, 16.1), (8, 1700, 94.20641, 15.7), (8, 1800, 94.85540, 16.0), (8, 1900, 95.13490, 16.7), (8, 2000, 95.18881, 16.6), (8, 2100, 95.43648, 17.0), (8, 2200, 95.76340, 17.5), (8, 2300, 96.00345, 17.4), (8, 2400, 96.17714, 17.6), (8, 2500, 96.19019, 18.1)]
plt.plot([], [], ' ', label='SVT-AV1 0.8.1 Vmaf Test\n1920*800 Frames: 168\nEncoder step: 100Kb/s ')
[plt.plot([x[1] for x in data if x[0] == i], [x[2] for x in data if x[0] == i], linestyle='dashed', linewidth=3.0, label=f'Enc-mode {i} ~ENC TIME = {round(statistics.mean([x[-1] for x in data if x[0] == i ]), 1)}') for i in range(0,9)]
plt.tight_layout()
plt.xticks([x for x in range(400, 2600, 100)])
plt.yticks([x for x in range(74, 100, 1)])
[plt.axvline(i, color='grey', linewidth=0.3) for i in range(400, 2600, 100)]
[plt.axhline(i, color='grey', linewidth=0.5) for i in range(73, 100, 2)]
[plt.axhline(i, color='black', linewidth=1) for i in range(74, 100, 2)]
plt.ylabel('Vmaf', size=20)
plt.xlabel('Bitrate', size=20)
plt.title('SVT-AV1 0.8.1 Film encoding test', size=30)
plt.legend(prop={'size': 22}, loc="lower right")
plt.show()
